---

# Prevent errors, skipping tasks without having to
# add 'when: firewall_services is defined' on several
# tasks
- name: Set firewall_services as empty list if not defined
  set_fact:
    firewall_services: "{{ firewall_services | default([], true) }}"

# tasks file for firewall
- name: include assert.yml
  include_tasks: assert.yml
  run_once: yes

- name: Populate service facts
  service_facts:

- name: Display service list for debugging
  debug:
    msg:
      - "Ansible service manager: {{ ansible_service_mgr | default('Not Specified') }}"
      - "ansible_facts['services']: {{ ansible_facts['services'] | default('Not Specified') }}"

- name: install required software
  package:
    name: "{{ firewall_packages_required }}"
    state: present
    update_cache: yes
  register: firewall_sw_install_result
  when:
    - firewall_packages_required is defined

- name: disable conflicting firewall services
  service:
    name: "{{ item }}"
    enabled: no
    state: stopped
  loop: "{{ firewall_packages_conflicting }}"
  when: (ansible_service_mgr == 'systemd' and
         ansible_facts['services'][item + '.service'] is defined and
         ansible_facts['services'][item + '.service']['status'] != 'not-found')
        or
        (ansible_service_mgr != 'systemd' and
         ansible_facts['services'][item] is defined and
         ansible_facts['services'][item]['status'] != 'not-found')

- name: Test IPv6 support
  include_tasks: check_ipv6_support.yml
  run_once: yes

- name: Show IPv6 Support Status
  debug:
    msg: "IPv6 Support: {{ 'enabled' if firewall_ipv6_enabled else 'disabled' }}"

# Set the configuration before loading the service
- name: Configuring UFW to not use IPv6 since support is disabled
  lineinfile:
    path: /etc/default/ufw
    regexp: '^IPV6=yes'
    line: IPV6=no
  when:
    - not firewall_ipv6_enabled
    - firewall_selected == "ufw"

- name: Ensure ipv4 service is enabled and started
  service:
    name: "{{ firewall_ipv4_service_name }}"
    state: started
    enabled: yes
  register: firewall_service_enablement_result

- name: Ensure ipv6 service is enabled and started (iptables only)
  service:
    name: "{{ firewall_ipv6_service_name }}"
    state: started
    enabled: yes
  when:
    - firewall_ipv6_service_name != 'unavailable'
    - firewall_ipv6_enabled

# Firewalld needs systemd to run, so skip if that is the case
- name: Run firewall software specific tasks
  include_tasks: "{{ firewall_selected }}.yml"
